{
  "stats": {
    "suites": 7,
    "tests": 18,
    "passes": 18,
    "pending": 0,
    "failures": 0,
    "start": "2022-10-17T14:55:09.214Z",
    "end": "2022-10-17T14:55:24.001Z",
    "duration": 14787,
    "testsRegistered": 18,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "04b6914d-48a7-4b0d-becb-2014d992c14c",
      "title": "",
      "fullFile": "cypress/e2e/public.cy.js",
      "file": "cypress/e2e/public.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "17aad93e-eb18-4b2d-9467-de4702fd88df",
          "title": "Hack#1 Private Test-3",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a0647467-7015-4487-802e-dafcaa9de94b",
              "title": "Problem 1",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1-1 Keyboard-container exists and the third row is correct",
                  "fullTitle": "Hack#1 Private Test-3 Problem 1 1-1 Keyboard-container exists and the third row is correct",
                  "timedOut": null,
                  "duration": 271,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.Keyboard-container').should('be.visible');",
                  "err": {},
                  "uuid": "7d721217-b71f-4aa4-a844-58956cc4772d",
                  "parentUUID": "a0647467-7015-4487-802e-dafcaa9de94b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "1-2-1 Keyboard-container first row correct",
                  "fullTitle": "Hack#1 Private Test-3 Problem 1 1-2-1 Keyboard-container first row correct",
                  "timedOut": null,
                  "duration": 98,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const chars = 'q w e r t y u i o p'.split(' ');\ncy.get('.Keyboard-container > #KBrow_1').should('have.class', 'Keyboard-row').children().should('have.length', 10);\ncy.get('.Keyboard-container > #KBrow_1').children().each(($el, index) => {\n  cy.wrap($el).should('have.text', chars[index]).should('have.id', 'char_' + chars[index]);\n});",
                  "err": {},
                  "uuid": "a63ee292-43e3-4455-9ad4-560df8f5ea49",
                  "parentUUID": "a0647467-7015-4487-802e-dafcaa9de94b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "1-2-2 Keyboard-container second row correct",
                  "fullTitle": "Hack#1 Private Test-3 Problem 1 1-2-2 Keyboard-container second row correct",
                  "timedOut": null,
                  "duration": 81,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const chars = 'a s d f g h j k l'.split(' ');\ncy.get('.Keyboard-container > #KBrow_2').should('have.class', 'Keyboard-row').children().should('have.length', 9);\ncy.get('.Keyboard-container > #KBrow_2').children().each(($el, index) => {\n  cy.wrap($el).should('have.text', chars[index]).should('have.id', 'char_' + chars[index]);\n});",
                  "err": {},
                  "uuid": "f3f39806-976f-44e9-a6ec-35f063a53cef",
                  "parentUUID": "a0647467-7015-4487-802e-dafcaa9de94b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7d721217-b71f-4aa4-a844-58956cc4772d",
                "a63ee292-43e3-4455-9ad4-560df8f5ea49",
                "f3f39806-976f-44e9-a6ec-35f063a53cef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 450,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2b2a1e24-1626-41ee-a085-1333a644ad6e",
              "title": "Problem 2",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "2-1 Board-container exists",
                  "fullTitle": "Hack#1 Private Test-3 Problem 2 2-1 Board-container exists",
                  "timedOut": null,
                  "duration": 57,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.Board-container').should('be.visible');",
                  "err": {},
                  "uuid": "1c41a4a4-2fe8-47a9-87da-c63d9b421677",
                  "parentUUID": "2b2a1e24-1626-41ee-a085-1333a644ad6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2-2-1 There are six Row-containers",
                  "fullTitle": "Hack#1 Private Test-3 Problem 2 2-2-1 There are six Row-containers",
                  "timedOut": null,
                  "duration": 44,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.Board-container > .Row-container').should('have.length', 6);",
                  "err": {},
                  "uuid": "1176c46d-0401-4114-ae43-0fea3fd5d106",
                  "parentUUID": "2b2a1e24-1626-41ee-a085-1333a644ad6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2-2-2 CurRow is at the first row",
                  "fullTitle": "Hack#1 Private Test-3 Problem 2 2-2-2 CurRow is at the first row",
                  "timedOut": null,
                  "duration": 51,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.Board-container > .Row-container').children().eq(0).should('have.class', 'current');",
                  "err": {},
                  "uuid": "f8bd4e16-7841-4d91-9b5b-2e7cb86712f9",
                  "parentUUID": "2b2a1e24-1626-41ee-a085-1333a644ad6e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1c41a4a4-2fe8-47a9-87da-c63d9b421677",
                "1176c46d-0401-4114-ae43-0fea3fd5d106",
                "f8bd4e16-7841-4d91-9b5b-2e7cb86712f9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 152,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4d0874a0-ac3c-464c-b24e-bb9d53b0c602",
              "title": "Problem 3",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "3-1 curGuess is rendered onto CurRow",
                  "fullTitle": "Hack#1 Private Test-3 Problem 3 3-1 curGuess is rendered onto CurRow",
                  "timedOut": null,
                  "duration": 335,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('body').type('{a}');\ncy.get('.Row-wrapper.current').children().eq(0).should('have.text', 'a').and('have.id', '0-0');\ncy.get('body').type('{b}').type('{c}').type('{e}');\ncy.get('.Row-wrapper.current').children().eq(1).should('have.text', 'b').and('have.id', '0-1');\ncy.get('.Row-wrapper.current').children().eq(2).should('have.text', 'c').and('have.id', '0-2');\ncy.get('.Row-wrapper.current').children().eq(3).should('have.text', 'e').and('have.id', '0-3');",
                  "err": {},
                  "uuid": "ff01ba71-26ee-47d5-8835-03dd43421c5a",
                  "parentUUID": "4d0874a0-ac3c-464c-b24e-bb9d53b0c602",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3-2 Type more than 5 letters",
                  "fullTitle": "Hack#1 Private Test-3 Problem 3 3-2 Type more than 5 letters",
                  "timedOut": null,
                  "duration": 478,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const test = ['a', 'b', 'c', 'd', 'e', 'f'];\nfor (let i = 0; i < test.length; i += 1) {\n  cy.get('body').type(`{${test[i]}}`);\n}\ncy.get('.Row-wrapper.current').children().each(($el, index) => {\n  cy.wrap($el).should('have.text', test[index]).and('have.id', '0-' + index);\n});",
                  "err": {},
                  "uuid": "648c4a36-1f59-4b1c-bfe9-d0fefbdcad71",
                  "parentUUID": "4d0874a0-ac3c-464c-b24e-bb9d53b0c602",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3-3 Backspace is working",
                  "fullTitle": "Hack#1 Private Test-3 Problem 3 3-3 Backspace is working",
                  "timedOut": null,
                  "duration": 540,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const test = ['z', 'x', 'c', 'v', 'backspace', 'b', 'n'];\nconst ans = ['z', 'x', 'c', 'b', 'n'];\nfor (let i = 0; i < test.length; i += 1) {\n  cy.get('body').type(`{${test[i]}}`);\n}\ncy.get('.Row-wrapper.current').children().each(($el, index) => {\n  cy.wrap($el).should('have.text', ans[index]);\n});",
                  "err": {},
                  "uuid": "47426cf6-c514-4c9e-bc65-9478299c91d4",
                  "parentUUID": "4d0874a0-ac3c-464c-b24e-bb9d53b0c602",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3-4 Filled wordboxes should have class filled",
                  "fullTitle": "Hack#1 Private Test-3 Problem 3 3-4 Filled wordboxes should have class filled",
                  "timedOut": null,
                  "duration": 208,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.Row-wrapper.current').children().each(($el, index) => {\n  cy.wrap($el).not('have.class', 'filled');\n});\ncy.get('body').type('{z}').type('{x}');\ncy.get('.Row-wrapper.current').children().each(($el, index) => {\n  if (index < 2) {\n    if (index == 0) cy.wrap($el).should('have.text', 'z').and('have.class', 'filled');else if (index == 1) cy.wrap($el).should('have.text', 'x').and('have.class', 'filled');\n  } else {\n    cy.wrap($el).not('have.class', 'filled');\n    cy.wrap($el).should('have.text', '');\n  }\n});",
                  "err": {},
                  "uuid": "89709970-ebbc-4bc5-8a88-6ac0e26d1896",
                  "parentUUID": "4d0874a0-ac3c-464c-b24e-bb9d53b0c602",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ff01ba71-26ee-47d5-8835-03dd43421c5a",
                "648c4a36-1f59-4b1c-bfe9-d0fefbdcad71",
                "47426cf6-c514-4c9e-bc65-9478299c91d4",
                "89709970-ebbc-4bc5-8a88-6ac0e26d1896"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1561,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6756090c-40ab-4b49-a6ce-6ae3d3c66aa8",
              "title": "Problem 4",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "4-1 CurRow change after pressing enter",
                  "fullTitle": "Hack#1 Private Test-3 Problem 4 4-1 CurRow change after pressing enter",
                  "timedOut": null,
                  "duration": 468,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const test = ['a', 'b', 'c', 'd', 'e', 'enter'];\nfor (let i = 0; i < test.length; i += 1) {\n  cy.get('body').type(`{${test[i]}}`);\n}\ncy.get('.Board-container').children().eq(0).get('.Row-wrapper').not('have.class', 'current');\ncy.get('.Board-container').children().eq(1).get('.Row-wrapper').should('have.class', 'current');",
                  "err": {},
                  "uuid": "7dbf6779-ef9f-48cd-8a0f-87e26252c983",
                  "parentUUID": "6756090c-40ab-4b49-a6ce-6ae3d3c66aa8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4-2 Green rendered correctly (only one line)",
                  "fullTitle": "Hack#1 Private Test-3 Problem 4 4-2 Green rendered correctly (only one line)",
                  "timedOut": null,
                  "duration": 479,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const test = ['a', 'a', 'r', 'o', 'r', 'enter'];\nconst answer = ['grey', 'grey', 'green', 'green', 'green'];\nfor (let i = 0; i < test.length; i += 1) {\n  cy.get('body').type(`{${test[i]}}`);\n}\ncy.get('.Board-container > .Row-container > .Row-wrapper').eq(0).children().each(($el, index) => {\n  cy.wrap($el).should('have.class', answer[index]).and('have.text', test[index]);\n});",
                  "err": {},
                  "uuid": "c3c4e7d1-f825-4306-9a84-837b2f8c0295",
                  "parentUUID": "6756090c-40ab-4b49-a6ce-6ae3d3c66aa8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4-3 Green and yellow rendered correctly (only one line)",
                  "fullTitle": "Hack#1 Private Test-3 Problem 4 4-3 Green and yellow rendered correctly (only one line)",
                  "timedOut": null,
                  "duration": 460,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const test = ['r', 'a', 'r', 'a', 'a', 'enter'];\nconst answer = ['yellow', 'grey', 'green', 'grey', 'grey'];\nfor (let i = 0; i < test.length; i += 1) {\n  cy.get('body').type(`{${test[i]}}`);\n}\ncy.get('.Board-container > .Row-container > .Row-wrapper').eq(0).children().each(($el, index) => {\n  cy.wrap($el).should('have.class', answer[index]).and('have.text', test[index]);\n});",
                  "err": {},
                  "uuid": "176f2d1c-3718-49b4-aef0-340ff973bffe",
                  "parentUUID": "6756090c-40ab-4b49-a6ce-6ae3d3c66aa8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4-4 Multiple Lines Test",
                  "fullTitle": "Hack#1 Private Test-3 Problem 4 4-4 Multiple Lines Test",
                  "timedOut": null,
                  "duration": 2512,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tests = [['z', 'x', 'c', 'v', 'b', 'enter'], ['r', 'e', 'a', 'r', 'b', 'enter'], ['r', 'r', 'r', 'e', 'e', 'enter'], ['r', 'r', 'r', 'r', 'e', 'enter'], ['e', 'r', 'r', 'r', 'e', 'enter'], ['e', 'r', 'o', 'r', 'e', 'enter']];\nconst answers = [['grey', 'grey', 'grey', 'grey', 'grey'], ['yellow', 'yellow', 'grey', 'yellow', 'grey'], ['yellow', 'green', 'green', 'yellow', 'grey'], ['yellow', 'green', 'green', 'grey', 'yellow'], ['green', 'green', 'green', 'yellow', 'grey'], ['green', 'green', 'yellow', 'yellow', 'grey']];\nfor (let line = 0; line < tests.length; line += 1) {\n  for (let i = 0; i < tests[0].length; i += 1) {\n    cy.get('body').type(`{${tests[line][i]}}`);\n  }\n}\ncy.get('.Board-container').children().each(($el, line) => {\n  if (line < answers.length) {\n    cy.wrap($el).children().eq(0).children().each(($el, i) => {\n      cy.wrap($el).should('have.text', tests[line][i]).should('have.class', answers[line][i]).should('have.id', line + '-' + i);\n    });\n  }\n});",
                  "err": {},
                  "uuid": "2b60a141-0d63-4d82-a624-fd1640bf0810",
                  "parentUUID": "6756090c-40ab-4b49-a6ce-6ae3d3c66aa8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7dbf6779-ef9f-48cd-8a0f-87e26252c983",
                "c3c4e7d1-f825-4306-9a84-837b2f8c0295",
                "176f2d1c-3718-49b4-aef0-340ff973bffe",
                "2b60a141-0d63-4d82-a624-fd1640bf0810"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3919,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a4a554c8-6792-4fb6-8e60-83cfe46fc3b1",
              "title": "Problem 5",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "5-1 Render green correctly",
                  "fullTitle": "Hack#1 Private Test-3 Problem 5 5-1 Render green correctly",
                  "timedOut": null,
                  "duration": 460,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const test = ['a', 'r', 'r', 'o', 'y', 'enter'];\nfor (let i = 0; i < test.length; i += 1) {\n  cy.get('body').type(`{${test[i]}}`);\n}\ncy.get('.Keyboard-container > .Keyboard-row > #char_r').should('have.class', 'green').and('have.text', 'r');\ncy.get('.Keyboard-container > .Keyboard-row > #char_o').should('have.class', 'green').and('have.text', 'o');\ncy.get('.Keyboard-container > .Keyboard-row > #char_a').should('have.text', 'a').not('have.class', 'green').not('have.class', 'yellow');\ncy.get('.Keyboard-container > .Keyboard-row > #char_y').should('have.text', 'y').not('have.class', 'green').not('have.class', 'yellow');\ncy.get('.Keyboard-container > .Keyboard-row > #char_e').should('have.text', 'e').not('have.class', 'green').not('have.class', 'yellow');",
                  "err": {},
                  "uuid": "109370ff-db2d-425c-91ba-f9760c404f6d",
                  "parentUUID": "a4a554c8-6792-4fb6-8e60-83cfe46fc3b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5-2 Multiple Lines",
                  "fullTitle": "Hack#1 Private Test-3 Problem 5 5-2 Multiple Lines",
                  "timedOut": null,
                  "duration": 2934,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tests = [['r', 'e', 'c', 'v', 'b', 'enter'], ['r', 'e', 'r', 'a', 'b', 'enter'], ['o', 'o', 'r', 'r', 'o', 'enter'], ['a', 'b', 'c', 'd', 'e', 'enter'], ['e', 'b', 'c', 'o', 'e', 'enter'], ['e', 'r', 'r', 'o', 'c', 'enter']]; // key match with \"e r r o r\"\nconst key_match = [['yellow', 'yellow', 'yellow', '', 'yellow'], ['yellow', 'green', 'green', '', 'green'], ['yellow', 'green', 'green', 'yellow', 'green'], ['yellow', 'green', 'green', 'yellow', 'green'], ['green', 'green', 'green', 'green', 'green'], ['green', 'green', 'green', 'green', 'green']];\nfor (let line = 0; line < tests.length; line += 1) {\n  for (let i = 0; i < tests[0].length; i += 1) {\n    cy.get('body').type(`{${tests[line][i]}}`);\n  }\n  for (let i = 0; i < KBrow_1.length; i++) {\n    if (!solList.includes(KBrow_1[i])) {\n      cy.get('.Keyboard-container > #KBrow_1 > #char_' + KBrow_1[i]).should('have.text', KBrow_1[i]).not('have.class', 'green').not('have.class', 'yellow');\n    } else {\n      if (key_match[line][solList.indexOf(KBrow_1[i])]) {\n        cy.get('.Keyboard-container > #KBrow_1 > #char_' + KBrow_1[i]).should('have.text', KBrow_1[i]).and('have.class', key_match[line][solList.indexOf(KBrow_1[i])]);\n      } else {\n        cy.get('.Keyboard-container > #KBrow_1 > #char_' + KBrow_1[i]).should('have.text', KBrow_1[i]).not('have.class', 'green').not('have.class', 'yellow');\n      }\n    }\n  }\n  for (let i = 0; i < KBrow_2.length; i++) {\n    if (!solList.includes(KBrow_2[i])) {\n      cy.get('.Keyboard-container > #KBrow_2 > #char_' + KBrow_2[i]).should('have.text', KBrow_2[i]).not('have.class', 'green').not('have.class', 'yellow');\n    } else {\n      if (key_match[line][solList.indexOf(KBrow_2[i])]) {\n        cy.get('.Keyboard-container > #KBrow_2 > #char_' + KBrow_2[i]).should('have.text', KBrow_2[i]).and('have.class', key_match[line][solList.indexOf(KBrow_2[i])]);\n      } else {\n        cy.get('.Keyboard-container > #KBrow_2 > #char_' + KBrow_2[i]).should('have.text', KBrow_2[i]).not('have.class', 'green').not('have.class', 'yellow');\n      }\n    }\n  }\n  for (let i = 0; i < KBrow_3.length; i++) {\n    if (!solList.includes(KBrow_3[i])) {\n      cy.get('.Keyboard-container > #KBrow_3 > #char_' + KBrow_3[i]).should('have.text', KBrow_3[i]).not('have.class', 'green').not('have.class', 'yellow');\n    } else {\n      if (key_match[line][solList.indexOf(KBrow_3[i])]) {\n        cy.get('.Keyboard-container > #KBrow_3 > #char_' + KBrow_3[i]).should('have.text', KBrow_3[i]).and('have.class', key_match[line][solList.indexOf(KBrow_3[i])]);\n      } else {\n        cy.get('.Keyboard-container > #KBrow_3 > #char_' + KBrow_3[i]).should('have.text', KBrow_3[i]).not('have.class', 'green').not('have.class', 'yellow');\n      }\n    }\n  }\n}",
                  "err": {},
                  "uuid": "bb29e455-39f3-4266-923f-f1b2bd00802e",
                  "parentUUID": "a4a554c8-6792-4fb6-8e60-83cfe46fc3b1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "109370ff-db2d-425c-91ba-f9760c404f6d",
                "bb29e455-39f3-4266-923f-f1b2bd00802e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3394,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3f1c0146-6e7d-4d41-9033-ac4ce2403ab7",
              "title": "Problem 6",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "6-1 Show winning info",
                  "fullTitle": "Hack#1 Private Test-3 Problem 6 6-1 Show winning info",
                  "timedOut": null,
                  "duration": 2039,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tests = [['r', 'e', 'c', 'v', 'b', 'enter'], ['r', 'e', 'r', 'a', 'b', 'enter'], ['o', 'o', 'r', 'r', 'o', 'enter'], ['a', 'b', 'c', 'd', 'e', 'enter'], ['e', 'r', 'r', 'o', 'r', 'enter']];\nfor (let line = 0; line < tests.length; line += 1) {\n  for (let i = 0; i < tests[0].length; i += 1) {\n    cy.get('body').type(`{${tests[line][i]}}`);\n  }\n  if (line != tests.length - 1) {\n    cy.get('.Wordle-lose').should('have.class', 'Hidden');\n  }\n}\ncy.get('.Wordle-win').should('have.text', 'You win!!!!');",
                  "err": {},
                  "uuid": "9a7b0357-b1d7-4627-9c87-a25a3b4c2a5e",
                  "parentUUID": "3f1c0146-6e7d-4d41-9033-ac4ce2403ab7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "6-2 Show losing info",
                  "fullTitle": "Hack#1 Private Test-3 Problem 6 6-2 Show losing info",
                  "timedOut": null,
                  "duration": 2461,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tests = [['r', 'e', 'c', 'v', 'b', 'enter'], ['r', 'e', 'r', 'a', 'b', 'enter'], ['o', 'o', 'r', 'r', 'o', 'enter'], ['a', 'b', 'c', 'd', 'e', 'enter'], ['e', 'b', 'c', 'o', 'e', 'enter'], ['e', 'r', 'r', 'o', 'c', 'enter']];\nfor (let line = 0; line < tests.length; line += 1) {\n  for (let i = 0; i < tests[0].length; i += 1) {\n    cy.get('body').type(`{${tests[line][i]}}`);\n  }\n  if (line != tests.length - 1) {\n    cy.get('.Wordle-lose').should('have.class', 'Hidden');\n  }\n}\ncy.get('.Wordle-lose').not('have.class', 'Hidden').should('have.text', 'You lose!!!! The answer is ' + solution + '.');",
                  "err": {},
                  "uuid": "27e1f5e4-6069-423a-b6ab-e7144197a577",
                  "parentUUID": "3f1c0146-6e7d-4d41-9033-ac4ce2403ab7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9a7b0357-b1d7-4627-9c87-a25a3b4c2a5e",
                "27e1f5e4-6069-423a-b6ab-e7144197a577"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4500,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/results",
        "overwrite": true,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}